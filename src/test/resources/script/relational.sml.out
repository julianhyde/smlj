(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)


let val emp0 = {id = 100, name = "Fred", deptno = 10} in #id emp0 end;
val it = 100 : int


val emp0 = {id = 100, name = "Fred", deptno = 10};
val emp0 = {deptno=10,id=100,name="Fred"} : {deptno:int, id:int, name:string}

val emp1 = {id = 101, name = "Velma", deptno = 20};
val emp1 = {deptno=20,id=101,name="Velma"} : {deptno:int, id:int, name:string}

val emp2 = {id = 102, name = "Shaggy", deptno = 30};
val emp2 = {deptno=30,id=102,name="Shaggy"}
  : {deptno:int, id:int, name:string}

val emp3 = {id = 103, name = "Scooby", deptno = 30};
val emp3 = {deptno=30,id=103,name="Scooby"}
  : {deptno:int, id:int, name:string}


val emps = [emp0, emp1, emp2, emp3];
val emps =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
  : {deptno:int, id:int, name:string} list


val emps =
  let
    val emp0 = {id = 100, name = "Fred", deptno = 10}
    and emp1 = {id = 101, name = "Velma", deptno = 20}
    and emp2 = {id = 102, name = "Shaggy", deptno = 30}
    and emp3 = {id = 103, name = "Scooby", deptno = 30}
  in
    [emp0, emp1, emp2, emp3]
  end;
val emps =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
  : {deptno:int, id:int, name:string} list


val depts =
  [{deptno = 10, name = "Sales"},
   {deptno = 20, name = "HR"},
   {deptno = 30, name = "Engineering"},
   {deptno = 40, name = "Support"}];
val depts =
  [{deptno=10,name="Sales"},{deptno=20,name="HR"},
   {deptno=30,name="Engineering"},{deptno=40,name="Support"}]
  : {deptno:int, name:string} list


from e in emps yield e;
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
  : {deptno:int, id:int, name:string} list


from e in emps yield #id e;
val it = [100,101,102,103] : int list


from e in emps yield (#id e) - 100;
val it = [0,1,2,3] : int list


from e in emps yield e.id - 100;
val it = [0,1,2,3] : int list


from e in emps yield #deptno e;
val it = [10,20,30,30] : int list


from e in emps yield e.deptno;
val it = [10,20,30,30] : int list


from e in emps yield {deptno = #deptno e, one = 1};
val it =
  [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}]
  : {deptno:int, one:int} list


from e in emps yield {deptno = e.deptno, one = 1};
val it =
  [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}]
  : {deptno:int, one:int} list


from e in emps yield {e.deptno, one = 1};
val it =
  [{deptno=10,one=1},{deptno=20,one=1},{deptno=30,one=1},{deptno=30,one=1}]
  : {deptno:int, one:int} list


from e in emps yield ((#id e) + (#deptno e));
val it = [110,121,132,133] : int list


from e in emps yield (e.id + e.deptno);
val it = [110,121,132,133] : int list


from e2 in (from e in emps yield #deptno e) yield e2 + 1;
val it = [11,21,31,31] : int list


from e2 in (from e in emps yield e.deptno) yield e2 + 1;
val it = [11,21,31,31] : int list


(* Disabled: '=' should have lower precedence than '#deptno e' fun application
from e in emps where #deptno e = 30 yield #name e;
*)

from e in emps where false yield e.deptno;
val it = [] : int list


(*) Function defined inside query
from e in emps
where e.deptno < 30
yield
  let
    fun p1 x = x + 1
  in
    p1 e.id
  end;
val it = [101,102] : int list


(* Disabled due to CCE
fun range i j =
  if i >= j then [] else i :: (range (i + 1) j);
*)

(* Disabled due to NPE in apply
range 0 5;

from i in range 0 5 where i mod 2 = 1 yield i;
*)
val integers = [0,1,2,3,4];
val integers = [0,1,2,3,4] : int list


from i in integers where i mod 2 = 1 yield i;
val it = [1,3] : int list


(*) missing yield
from i in integers where i mod 2 = 1;
val it = [1,3] : int list


from e in emps where e.deptno = 30 yield e.id;
val it = [102,103] : int list


(*) cartesian product
from e in emps, e2 in emps yield e.name ^ "-" ^ e2.name;
val it =
  ["Fred-Fred","Fred-Velma","Fred-Shaggy","Fred-Scooby","Velma-Fred",
   "Velma-Velma","Velma-Shaggy","Velma-Scooby","Shaggy-Fred","Shaggy-Velma",
   "Shaggy-Shaggy","Shaggy-Scooby",...] : string list


(*) cartesian product, missing yield
from d in depts, i in integers;
val it =
  [{d={deptno=10,name="Sales"},i=0},{d={deptno=10,name="Sales"},i=1},
   {d={deptno=10,name="Sales"},i=2},{d={deptno=10,name="Sales"},i=3},
   {d={deptno=10,name="Sales"},i=4},{d={deptno=20,name="HR"},i=0},
   {d={deptno=20,name="HR"},i=1},{d={deptno=20,name="HR"},i=2},
   {d={deptno=20,name="HR"},i=3},{d={deptno=20,name="HR"},i=4},
   {d={deptno=30,name="Engineering"},i=0},
   {d={deptno=30,name="Engineering"},i=1},...]
  : {d:{deptno:int, name:string}, i:int} list


(*) join
from e in emps, d in depts
  where e.deptno = d.deptno
  yield {id = e.id, deptno = e.deptno, ename = e.name, dname = d.name};
val it =
  [{deptno=10,dname="Sales",ename="Fred",id=100},
   {deptno=20,dname="HR",ename="Velma",id=101},
   {deptno=30,dname="Engineering",ename="Shaggy",id=102},
   {deptno=30,dname="Engineering",ename="Scooby",id=103}]
  : {deptno:int, dname:string, ename:string, id:int} list


(*) as above, using abbreviated record syntax
from e in emps, d in depts
  where e.deptno = d.deptno
  yield {e.id, e.deptno, ename = e.name, dname = d.name};
val it =
  [{deptno=10,dname="Sales",ename="Fred",id=100},
   {deptno=20,dname="HR",ename="Velma",id=101},
   {deptno=30,dname="Engineering",ename="Shaggy",id=102},
   {deptno=30,dname="Engineering",ename="Scooby",id=103}]
  : {deptno:int, dname:string, ename:string, id:int} list


(*) join, no yield
from e in emps, d in depts;
val it =
  [{d={deptno=10,name="Sales"},e={deptno=10,id=100,name="Fred"}},
   {d={deptno=20,name="HR"},e={deptno=10,id=100,name="Fred"}},
   {d={deptno=30,name="Engineering"},e={deptno=10,id=100,name="Fred"}},
   {d={deptno=40,name="Support"},e={deptno=10,id=100,name="Fred"}},
   {d={deptno=10,name="Sales"},e={deptno=20,id=101,name="Velma"}},
   {d={deptno=20,name="HR"},e={deptno=20,id=101,name="Velma"}},
   {d={deptno=30,name="Engineering"},e={deptno=20,id=101,name="Velma"}},
   {d={deptno=40,name="Support"},e={deptno=20,id=101,name="Velma"}},
   {d={deptno=10,name="Sales"},e={deptno=30,id=102,name="Shaggy"}},
   {d={deptno=20,name="HR"},e={deptno=30,id=102,name="Shaggy"}},
   {d={deptno=30,name="Engineering"},e={deptno=30,id=102,name="Shaggy"}},
   {d={deptno=40,name="Support"},e={deptno=30,id=102,name="Shaggy"}},...]
  : {d:{deptno:int, name:string}, e:{deptno:int, id:int, name:string}} list


(*) join where neither variable is referenced
from e in emps, d in depts
  yield 0;
val it = [0,0,0,0,0,0,0,0,0,0,0,0,...] : int list


(*) join where right variable is not referenced
from e in emps, d in depts
  yield e.id;
val it = [100,100,100,100,101,101,101,101,102,102,102,102,...] : int list


(*) join where left variable is not referenced
from e in emps, d in depts
  yield d.deptno;
val it = [10,20,30,40,10,20,30,40,10,20,30,40,...] : int list


(*) join group where neither variable is referenced
from e in emps, d in depts
  group compute count = sum of 1;
val it = [16] : int list


(*) as above, without 'of'
from e in emps, d in depts
  group compute count = count;
val it = [16] : int list


(*) join group where right variable is not referenced
from e in emps, d in depts
  group e.deptno compute count = sum of 1;
val it = [{count=4,deptno=20},{count=4,deptno=10},{count=8,deptno=30}]
  : {count:int, deptno:int} list


(*) exists (defining the "exists" function ourselves)
(*) and correlated sub-query
let
  fun exists [] = false
    | exists (hd :: tl) = true
in
  from e in emps
  where exists (from d in depts
                where d.deptno = e.deptno
                andalso d.name = "Engineering")
  yield e.name
end;
val it = ["Shaggy","Scooby"] : string list


(*) in (defining the "in_" function ourselves)
let
  fun in_ e [] = false
    | in_ e (h :: t) = e = h orelse (in_ e t)
in
  from e in emps
  where in_ e.deptno (from d in depts
                where d.name = "Engineering"
                yield d.deptno)
  yield e.name
end;
val it = ["Shaggy","Scooby"] : string list


(*) elem (equivalent to SQL's IN)
from e in emps
  where e.deptno elem (from d in depts
    where d.name = "Engineering"
    yield d.deptno)
yield e.name;
val it = ["Shaggy","Scooby"] : string list


(*) notElem (equivalent to SQL's NOT IN, also to 'not ... elem')
from e in emps
  where e.deptno notElem (from d in depts
    where d.name = "Engineering"
    yield d.deptno)
yield e.name;
val it = ["Fred","Velma"] : string list


(*) equivalent to previous
from e in emps
  where not (e.deptno elem (from d in depts
    where d.name = "Engineering"
    yield d.deptno))
yield e.name;
val it = ["Fred","Velma"] : string list


(*) equivalent to previous
from e in emps
  where e.deptno elem (from d in depts
    where d.name = "Engineering"
    yield d.deptno) = false
yield e.name;
val it = ["Fred","Velma"] : string list


(*) union (matches SQL's UNION ALL)
(from e in emps yield e.deptno)
union
(from d in depts yield d.deptno);
val it = [10,20,30,30,10,20,30,40] : int list


(*) simulate SQL's UNION DISTINCT
from deptno in (
  (from e in emps yield e.deptno)
  union
  (from d in depts yield d.deptno))
group deptno;
val it = [20,40,10,30] : int list


(*) except
(from d in depts yield d.deptno)
except
(from e in emps yield e.deptno);
val it = [40] : int list


(*) simulate SQL's EXCEPT DISTINCT
fun exceptDistinct l1 l2 =
  from v in l1 except l2
  group v;
val exceptDistinct = fn : 'a list -> 'a list -> 'a list

exceptDistinct (from e in emps yield e.deptno)
  (from d in depts where d.deptno <> 20 yield d.deptno);
val it = [20] : int list


(*) simulate SQL's EXCEPT ALL
fun exceptAll l1 l2 =
  from e in (
      from e in
        (from v in l1 yield {v, c = 1})
        union
        (from v in l2 yield {v, c = ~1})
      group e.v compute c = sum of e.c
      where c > 0),
    r in (
      let
        fun units 0 = []
          | units n = () :: (units (n - 1))
      in
        units e.c
      end)
    yield e.v;
val exceptAll = fn : 'a list -> 'a list -> 'b list

exceptAll (from e in emps yield e.deptno)
  (from d in depts yield d.deptno);
val it = [30] : 'a list


(*) intersect
(from e in emps yield e.deptno)
intersect
(from d in depts yield d.deptno);
val it = [10,20,30,30] : int list


(*) simulate SQL's INTERSECT DISTINCT
fun intersectDistinct l1 l2 =
  from v in l1 intersect l2
  group v;
val intersectDistinct = fn : 'a list -> 'a list -> 'a list

intersectDistinct (from e in emps yield e.deptno)
  (from d in depts yield d.deptno);
val it = [20,10,30] : int list


(*) simulate SQL's INTERSECT ALL
fun intersectAll l1 l2 =
  from e in (
      from e in
        (from v in l1 group v compute c = count)
        union
        (from v in l2 group v compute c = count)
      group e.v compute c = min of e.c, c2 = count
      where c2 = 2
      yield {v, c}),
    r in (
      let
        fun units 0 = []
          | units n = () :: (units (n - 1))
      in
        units e.c
      end)
    yield e.v;
val intersectAll = fn : 'a list -> 'a list -> 'b list

intersectAll (from e in emps yield e.deptno)
  (from d in depts yield d.deptno);
val it = [20,10,30] : 'a list


(*) foldl function (built into SML)
let
  fun foldl f start [] = start
    | foldl f start (hd :: tl) = foldl f (f (start, hd)) tl
in
  foldl (fn (x, y) => x + y) 0 [2,3,4]
end;
val it = 9 : int


(*) "group by" via higher-order functions
(*
let
  fun foldl f start [] = start
    | foldl f start (hd :: tl) = foldl f (f (start, hd)) tl;
  fun map f [] = []
    | map f (hd :: tl) = (f hd) :: (map f tl);
  fun computeAgg (extractor, folder) list =
      foldl folder (map extractor list);
  fun aggregate aggFns list =
      map (computeAgg list) aggFns;
  fun sum (x, y) = x + y;
in
  aggregate [(fn {id=id1,name=name1,deptno=deptno1} => id1, sum)] emps
end;
*)

(*) Basic 'group'
from e in emps
group deptno = e.deptno
  compute sum = sum of e.id,
          count = count;
val it =
  [{count=1,deptno=20,sum=101},{count=1,deptno=10,sum=100},
   {count=2,deptno=30,sum=205}] : {count:int, deptno:int, sum:int} list


(*) As previous, without the implied "deptno =" in "group",
(*) and "sum =" and "count =" in "compute".
from e in emps
group e.deptno
  compute sum of e.id,
          count;
val it =
  [{count=1,deptno=20,sum=101},{count=1,deptno=10,sum=100},
   {count=2,deptno=30,sum=205}] : {count:int, deptno:int, sum:int} list


(*) 'group' with no aggregates
from e in emps
group deptno = e.deptno;
val it = [20,10,30] : int list


from e in emps
group e.deptno;
val it = [20,10,30] : int list


(*) composite 'group' with no aggregates
from e in emps
group e.deptno, idMod2 = e.id mod 2;
val it =
  [{deptno=30,idMod2=0},{deptno=30,idMod2=1},{deptno=10,idMod2=0},
   {deptno=20,idMod2=1}] : {deptno:int, idMod2:int} list


(*) 'group' with 'where' and complex argument to 'sum'
from e in emps
where e.deptno < 30
group deptno = e.deptno
  compute sumId = sum of e.id,
          sumIdPlusDeptno = sum of e.id + e.deptno;
val it =
  [{deptno=20,sumId=101,sumIdPlusDeptno=121},
   {deptno=10,sumId=100,sumIdPlusDeptno=110}]
  : {deptno:int, sumId:int, sumIdPlusDeptno:int} list


(*) 'group' with join
from e in emps, d in depts
where e.deptno = d.deptno
group e.deptno, ename = e.name, dname = d.name
  compute sumId = sum of e.id;
val it =
  [{deptno=30,dname="Engineering",ename="Scooby",sumId=103},
   {deptno=30,dname="Engineering",ename="Shaggy",sumId=102},
   {deptno=10,dname="Sales",ename="Fred",sumId=100},
   {deptno=20,dname="HR",ename="Velma",sumId=101}]
  : {deptno:int, dname:string, ename:string, sumId:int} list


(*) empty 'group'
from e in emps
group compute sumId = sum of e.id;
val it = [406] : int list


(*) user-defined aggregate function
let
  fun siz [] = 0
    | siz (ht :: tl) = 1 + (siz tl)
in
  from e in emps
  group deptno = e.deptno
  compute size = siz of e.id
end;
val it = [{deptno=20,size=1},{deptno=10,size=1},{deptno=30,size=2}]
  : {deptno:int, size:int} list


(*) as previous, but 'e' rather than 'e.id'
let
  fun siz [] = 0
    | siz (ht :: tl) = 1 + (siz tl)
in
  from e in emps
  group deptno = e.deptno
  compute size = siz of e
end;
val it = [{deptno=20,size=1},{deptno=10,size=1},{deptno=30,size=2}]
  : {deptno:int, size:int} list


(*) user-defined aggregate function #3
let
  fun my_sum [] = 0
    | my_sum (head :: tail) = head + (my_sum tail)
in
  from e in emps
  group e.deptno
  compute my_sum of e.id
end;
val it =
  [{deptno=20,my_sum=101},{deptno=10,my_sum=100},{deptno=30,my_sum=205}]
  : {deptno:int, my_sum:int} list


(*) Identity aggregate function (equivalent to SQL's COLLECT)
let
  fun id x = x
in
  from e in emps
  group e.deptno compute rows = id of e
end;
val it =
  [{deptno=20,rows=[{deptno=20,id=101,name="Velma"}]},
   {deptno=10,rows=[{deptno=10,id=100,name="Fred"}]},
   {deptno=30,
    rows=[{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]}]
  : {deptno:int, rows:{deptno:int, id:int, name:string} list} list


(*) Identity aggregate function, without 'of'
let
  fun id x = x
in
  from e in emps
  group e.deptno compute rows = id
end;
val it =
  [{deptno=20,rows=[{deptno=20,id=101,name="Velma"}]},
   {deptno=10,rows=[{deptno=10,id=100,name="Fred"}]},
   {deptno=30,
    rows=[{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]}]
  : {deptno:int, rows:{deptno:int, id:int, name:string} list} list


(*) Identity aggregate function, using lambda
from e in emps
group e.deptno compute rows = (fn x => x);
val it =
  [{deptno=20,rows=[{deptno=20,id=101,name="Velma"}]},
   {deptno=10,rows=[{deptno=10,id=100,name="Fred"}]},
   {deptno=30,
    rows=[{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]}]
  : {deptno:int, rows:{deptno:int, id:int, name:string} list} list


(*) Identity aggregate function with multiple input variables
from e in emps, d in depts
where e.deptno = d.deptno
group e.deptno compute rows = (fn x => x);
val it =
  [{deptno=20,rows=[{d={deptno=#,name=#},e={deptno=#,id=#}}]},
   {deptno=10,rows=[{d={deptno=#,name=#},e={deptno=#,id=#}}]},
   {deptno=30,
    rows=
    [{d={deptno=#,name=#},e={deptno=#,id=#}},
     {d={deptno=#,name=#},e={deptno=#,id=#}}]}]
  : {deptno:int, rows:{d:{deptno:int, name:string}, e:{deptno:int, id:int, name:string}} list} list


(*) Group followed by yield
from e in emps
group e.deptno
  compute sumId = sum of e.id,
          count = count of e
yield {deptno, avgId = sumId / count};
val it = [{avgId=101,deptno=20},{avgId=100,deptno=10},{avgId=102,deptno=30}]
  : {avgId:int, deptno:int} list


(*) Similar, using a sub-from:
from g in (
  from e in emps
  group e.deptno
    compute sumId = sum of e.id,
            count = count of e)
yield {g.deptno, avgId = g.sumId / g.count};
val it = [{avgId=101,deptno=20},{avgId=100,deptno=10},{avgId=102,deptno=30}]
  : {avgId:int, deptno:int} list


(*) Group followed by order and yield
from e in emps
group e.deptno
  compute sumId = sum of e.id,
          count = count of e
order deptno desc
yield {deptno, avgId = sumId / count};
val it = [{avgId=102,deptno=30},{avgId=101,deptno=20},{avgId=100,deptno=10}]
  : {avgId:int, deptno:int} list


(*) Group followed by group
from e in emps
  group e.deptno, parity = e.deptno mod 2
    compute sumId = sum of e.id
  group parity
    compute sumSumId = sum of sumId,
      c = count;
val it = [{c=3,parity=0,sumSumId=406}]
  : {c:int, parity:int, sumSumId:int} list


(*) Group followed by group followed by yield
from e in emps
  group e.deptno, parity = e.deptno mod 2
    compute sumId = sum of e.id
  group parity
    compute sumSumId = sum of sumId
  yield sumSumId * parity;
val it = [0] : int list


(*) Join followed by composite group
from e in emps,
    d in depts
  where e.deptno = d.deptno
  group x = e.id + d.deptno, e.deptno
    compute sumId = sum of e.id;
val it =
  [{deptno=30,sumId=103,x=133},{deptno=30,sumId=102,x=132},
   {deptno=20,sumId=101,x=121},{deptno=10,sumId=100,x=110}]
  : {deptno:int, sumId:int, x:int} list


(*) Join followed by single group (from right input)
from e in emps,
    d in depts
  where e.deptno = d.deptno
  group d.deptno;
val it = [20,10,30] : int list


(*) Join followed by single group (from left input)
from e in emps,
    d in depts
  where e.deptno = d.deptno
  group e.deptno;
val it = [20,10,30] : int list


(*) Join followed by single group and order
from e in emps,
    d in depts
  where e.deptno = d.deptno
  group e.deptno
  order deptno desc;
val it = [30,20,10] : int list


(*) Join followed by order
from e in emps,
    d in depts
  where e.deptno = d.deptno
  order e.deptno desc, e.name;
val it =
  [{d={deptno=30,name="Engineering"},e={deptno=30,id=103,name="Scooby"}},
   {d={deptno=30,name="Engineering"},e={deptno=30,id=102,name="Shaggy"}},
   {d={deptno=20,name="HR"},e={deptno=20,id=101,name="Velma"}},
   {d={deptno=10,name="Sales"},e={deptno=10,id=100,name="Fred"}}]
  : {d:{deptno:int, name:string}, e:{deptno:int, id:int, name:string}} list


(*) Join followed by order and yield
from e in emps,
    d in depts
  where e.deptno = d.deptno
  order e.deptno desc, e.name
  yield e.name;
val it = ["Scooby","Shaggy","Velma","Fred"] : string list


(*) Empty from
from;
val it = [()] : unit list


(*) Empty from with where
from where true;
val it = [()] : unit list


from where false;
val it = [] : unit list


let
  val b = 1 < 2
in
  from
    where b
end;
val it = [()] : unit list


(*) Empty from with yield
let
  val ten = 6 + 4;
in
  from
    yield {ten, nine = ten - 1}
end;
val it = [{nine=9,ten=10}] : {nine:int, ten:int} list


(*) Empty from with empty group
from
  group;
val it = [()] : unit list


(*) Empty from with empty group and one aggregate function
from
  group compute c = count of "a";
val it = [1] : int list


(*) Empty from with group
let
  val ten = 6 + 4;
  val eleven = ten + 1;
in
  from
    group ten compute sumEleven = sum of eleven
end;
val it = [{sumEleven=11,ten=10}] : {sumEleven:int, ten:int} list


(*) Empty from with composite group
from
  group x = "a", y = 6;
val it = [{x="a",y=6}] : {x:string, y:int} list


from
  group z = "a", y = 6;
val it = [{y=6,z="a"}] : {y:int, z:string} list


(*) Empty from with group and yield
from
  group one = 1 compute two = sum of 2, three = sum of 3
  yield {c1 = one, c5 = two + three};
val it = [{c1=1,c5=5}] : {c1:int, c5:int} list


(*) Patterns left of 'in'
fun sumPairs pairs =
  from (left, right) in pairs
  yield left + right;
val sumPairs = fn : (int * int) list -> int list

sumPairs [];
val it = [] : int list

sumPairs [(1, 2), (3, 4)];
val it = [3,7] : int list


(*) Skip rows that do not match the pattern
from (left, 2) in [(1, 2), (3, 4), (5, 2)]
  yield left;
val it = [1,5] : int list


(*) Record pattern
from {b = b, a = a} in [{a=1,b=2}];
val it = [{a=1,b=2}] : {a:int, b:int} list

from {b, a} in [{a=1,b=2}];
val it = [{a=1,b=2}] : {a:int, b:int} list

from {a = a, b = b} in [{a=1,b=2}];
val it = [{a=1,b=2}] : {a:int, b:int} list

from {b = a, a = b} in [{a=1,b=2}];
val it = [{a=2,b=1}] : {a:int, b:int} list

from {b = c, c = a, a = b} in [{a=1,b=2,c=3}];
val it = [{a=3,b=1,c=2}] : {a:int, b:int, c:int} list

from {b = a, c = b, a = c} in [{a=1,b=2,c=3}];
val it = [{a=2,b=3,c=1}] : {a:int, b:int, c:int} list

from {c = b, a = c, b = a} in [{a=1,b=2,c=3}];
val it = [{a=2,b=3,c=1}] : {a:int, b:int, c:int} list

from {a = c, b = a, c = b} in [{a=1,b=2,c=3}];
val it = [{a=2,b=3,c=1}] : {a:int, b:int, c:int} list


(*) Record with wildcards
from {a = a, ...} in [{a=1,b=2}];
val it = [1] : int list

from {a = a, b = true, c = c} in [{a=1,b=true,c=3}];
val it = [{a=1,c=3}] : {a:int, c:int} list

from {a = c, b = true, c = a} in [{a=1,b=true,c=3}];
val it = [{a=3,c=1}] : {a:int, c:int} list

from {a = c, b = true, c = a} in [{a=1,b=true,c=3},{a=1,b=true,c=4}] group c compute sum of a;
val it = [{c=1,sum=7}] : {c:int, sum:int} list

from {a = a, b = b, c = _} in [{a=1,b=true,c=3},{a=1,b=true,c=4}];
val it = [{a=1,b=true},{a=1,b=true}] : {a:int, b:bool} list

from {a = a, b = b, c = _} in [{a=1,b=true,c=3},{a=1,b=true,c=4}], d in ["a", "b"];
val it =
  [{a=1,b=true,d="a"},{a=1,b=true,d="b"},{a=1,b=true,d="a"},{a=1,b=true,d="b"}]
  : {a:int, b:bool, d:string} list

from {a = a, b = b, ...} in [{a=1,b=true,c=3},{a=1,b=true,c=4}];
val it = [{a=1,b=true},{a=1,b=true}] : {a:int, b:bool} list

from {a = a, c = c, ...} in [{a=1,b=true,c=3},{a=1,b=true,c=4}];
val it = [{a=1,c=3},{a=1,c=4}] : {a:int, c:int} list

from {a, c, ...} in [{a=1,b=true,c=3},{a=1,b=true,c=4}];
val it = [{a=1,c=3},{a=1,c=4}] : {a:int, c:int} list

from {a = a, c = c, ...} in [{a=1,b=true,c=3},{a=1,b=true,c=4}];
val it = [{a=1,c=3},{a=1,c=4}] : {a:int, c:int} list

from {b = y, ...} in [{a=1,b=2}];
val it = [2] : int list

from {b = y, a = (p, q)} in [{a=(1,true),b=2}];
val it = [{p=1,q=true,y=2}] : {p:int, q:bool, y:int} list

from {b = y, a = (2, q)} in [{a=(1,true),b=2},{a=(2,false),b=3}];
val it = [{q=false,y=3}] : {q:bool, y:int} list

from {b = y, a = x} in [{a=1,b=2}];
val it = [{x=1,y=2}] : {x:int, y:int} list

from {a = x, ...} in [{a=1,b=2,c=3}];
val it = [1] : int list

from {a = x, b = y, ...} in [{a=1,b=2,c=3}];
val it = [{x=1,y=2}] : {x:int, y:int} list


fun listHeads lists =
  from hd :: tl in lists
  yield hd + 1;
val listHeads = fn : int list list -> int list

listHeads [];
val it = [] : int list

listHeads [[1, 2], [3], [4, 5, 6]];
val it = [2,4,5] : int list


fun listFields lists =
  from {a = x, b = y} in lists
  yield x + 1;
val listFields = fn : {a:int, b:'a} list -> int list

listFields [];
val it = [] : int list

listFields [{a = 1, b = 2}, {a = 3, b = 0}, {a = 4, b = 5}];
val it = [2,4,5] : int list


(*) As above, using abbreviated record pattern
fun listFields2 lists =
  from {a, b} in lists
  yield a + 1;
val listFields2 = fn : {a:int, b:'a} list -> int list

listFields [];
val it = [] : int list

listFields [{a = 1, b = 2}, {a = 3, b = 0}, {a = 4, b = 5}];
val it = [2,4,5] : int list


(*) Temporary functions
let
  fun abbrev s =
    if String.size s > 5
    then (String.substring (s, 0, 3)) ^ "."
    else s;
  fun shouldPromote e =
    e.id < e.deptno * 4
in
  from e in emps
  where shouldPromote e
  yield {e.id, e.deptno, abbrev_name = abbrev e.name}
end;
val it =
  [{abbrev_name="Sha.",deptno=30,id=102},{abbrev_name="Sco.",deptno=30,id=103}]
  : {abbrev_name:string, deptno:int, id:int} list


(*) There's no flatMap in the standard library, so define one
fun flatMap f l = List.concat (List.map f l);
val flatMap = fn : ('a -> 'b list) -> 'a list -> 'b list

flatMap String.explode ["ab", "", "def"];
val it = [#"a",#"b",#"d",#"e",#"f"] : char list


(*) Here's another way to define flatMap
fun flatMap2 f l = List.foldl List.at [] (List.map f l);
val flatMap2 = fn : ('a -> 'b list) -> 'a list -> 'b list

flatMap2 String.explode ["ab", "", "def"];
val it = [#"d",#"e",#"f",#"a",#"b"] : char list


(*) A function that runs a query and returns the result
fun employeesIn deptno =
  from e in emps
  where e.deptno = deptno;
val employeesIn = fn : int -> {deptno:int, id:int, name:string} list


employeesIn 10;
val it = [{deptno=10,id=100,name="Fred"}]
  : {deptno:int, id:int, name:string} list

employeesIn 25;
val it = [] : {deptno:int, id:int, name:string} list

employeesIn 30;
val it = [{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
  : {deptno:int, id:int, name:string} list


(*) Using 'map' to stick together results
List.map employeesIn [10, 25, 30];
val it =
  [[{deptno=10,id=100,name="Fred"}],[],
   [{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]]
  : {deptno:int, id:int, name:string} list list


(*) Same, using 'from'
from deptno in [10, 25, 30]
  yield employeesIn deptno;
val it =
  [[{deptno=10,id=100,name="Fred"}],[],
   [{deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]]
  : {deptno:int, id:int, name:string} list list


(*) Flatten (using flatMap)
flatMap employeesIn [10, 25, 30];
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=30,id=102,name="Shaggy"},
   {deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


(*) Flatten (using a lateral join); compare to SQL 'CROSS APPLY'
from deptno in [10, 25, 30],
    e in employeesIn deptno
  yield e;
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=30,id=102,name="Shaggy"},
   {deptno=30,id=103,name="Scooby"}] : {deptno:int, id:int, name:string} list


(*) Function in yield
let
  val intFns = from a in [2, 3, 4] yield {a, f = fn x => x + a}
in
  from intFn in intFns yield {intFn.a, f1 = intFn.f 1, f2 = intFn.f 2}
end;
val it = [{a=2,f1=3,f2=4},{a=3,f1=4,f2=5},{a=4,f1=5,f2=6}]
  : {a:int, f1:int, f2:int} list


(*) Function in order
val triples =
  from t in [{x=1,y=2}, {x=2,y=6}, {x=3, y=5}]
    yield {t.x, t.y, foo = fn z => t.x * z + t.y};
val triples = [{foo=fn,x=1,y=2},{foo=fn,x=2,y=6},{foo=fn,x=3,y=5}]
  : {foo:int -> int, x:int, y:int} list

from t in triples order t.foo 1;
val it = [{foo=fn,x=1,y=2},{foo=fn,x=2,y=6},{foo=fn,x=3,y=5}]
  : {foo:int -> int, x:int, y:int} list
 (* 1+2 < 2+6 = 3+5 *)
from t in triples order t.foo 1, t.x;
val it = [{foo=fn,x=1,y=2},{foo=fn,x=2,y=6},{foo=fn,x=3,y=5}]
  : {foo:int -> int, x:int, y:int} list
 (* (1+2,1) < (2+6,2) < (3+5,3) *)
from t in triples order t.foo 1, t.x desc;
val it = [{foo=fn,x=1,y=2},{foo=fn,x=3,y=5},{foo=fn,x=2,y=6}]
  : {foo:int -> int, x:int, y:int} list
 (* (1+2,~1) < (3+5,~3) < (2+6,~2) *)
from t in triples order t.foo ~1, t.y;
val it = [{foo=fn,x=1,y=2},{foo=fn,x=3,y=5},{foo=fn,x=2,y=6}]
  : {foo:int -> int, x:int, y:int} list
 (* (~1+2,2) < (~3+5,5) < (~2+6,6) *)
from {foo,x,y} in triples
  order foo ~1, x;
val it = [{foo=fn,x=1,y=2},{foo=fn,x=3,y=5},{foo=fn,x=2,y=6}]
  : {foo:int -> int, x:int, y:int} list
 (* (~1+2,2) < (~3+5,5) < (~2+6,6) *)
from t1 in triples, t2 in triples
  where t1.y = t2.y
  order t1.foo ~1, t2.x;
val it =
  [{t1={foo=fn,x=1,y=2},t2={foo=fn,x=1,y=2}},
   {t1={foo=fn,x=3,y=5},t2={foo=fn,x=3,y=5}},
   {t1={foo=fn,x=2,y=6},t2={foo=fn,x=2,y=6}}]
  : {t1:{foo:int -> int, x:int, y:int}, t2:{foo:int -> int, x:int, y:int}} list
 (* (~1+2,2) < (~3+5,5) < (~2+6,6) *)

(*) A deep nested loop
from e in
  (from e in
    (from e in
      (from e in
        (from e in
          (from e in
            (from e in
              (from e in
                (from e in
                  (from e in
                    (from e in emps
                     yield e)
                   yield e)
                 yield e)
               yield e)
             yield e)
           yield e)
         yield e)
       yield e)
     yield e)
   yield e);
val it =
  [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
   {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
  : {deptno:int, id:int, name:string} list


(*) Hybrid
from r in
  List.tabulate (6, fn i =>
    {i, j = i + 3, s = String.substring ("morel", 0, i)})
yield {r.j, r.s};
val it =
  [{j=3,s=""},{j=4,s="m"},{j=5,s="mo"},{j=6,s="mor"},{j=7,s="more"},
   {j=8,s="morel"}] : {j:'a, s:string} list

Sys.plan();
val it =
  "from(r, apply(fnValue List.tabulate, argCode tuple(constant(6), match(i, tuple(get(name i), apply(fnValue +, argCode tuple(get(name i), constant(3))), apply(fnValue String.substring, argCode tuple(constant(morel), constant(0), get(name i))))))))"
  : string


Sys.set ("hybrid", false);
val it = () : unit

Sys.show "hybrid";
val it = SOME "false" : string option

Sys.set ("hybrid", true);
val it = () : unit

Sys.show "hybrid";
val it = SOME "true" : string option


(*) dummy
from message in ["the end"];
val it = ["the end"] : string list
